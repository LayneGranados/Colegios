--   -------------------------------------------------- 
--   Generated by Enterprise Architect Version 10.0.1009
--   Created On : domingo, 22 noviembre, 2015 
--   DBMS       : MySql 
--   -------------------------------------------------- 

USE colegios
;

SET FOREIGN_KEY_CHECKS=0;


--  Drop Tables, Stored Procedures and Views 

DROP TABLE IF EXISTS acudiente CASCADE
;
DROP TABLE IF EXISTS anio CASCADE
;
DROP TABLE IF EXISTS area_conocimiento CASCADE
;
DROP TABLE IF EXISTS asignatura CASCADE
;
DROP TABLE IF EXISTS asignatura_curso CASCADE
;
DROP TABLE IF EXISTS asignatura_curso_profesor CASCADE
;
DROP TABLE IF EXISTS boletin CASCADE
;
DROP TABLE IF EXISTS calificacion CASCADE
;
DROP TABLE IF EXISTS caracter CASCADE
;
DROP TABLE IF EXISTS caracteristica_boletin CASCADE
;
DROP TABLE IF EXISTS colegio CASCADE
;
DROP TABLE IF EXISTS condicion_anio_anterior CASCADE
;
DROP TABLE IF EXISTS curso CASCADE
;
DROP TABLE IF EXISTS departamento CASCADE
;
DROP TABLE IF EXISTS detalle_calificacion CASCADE
;
DROP TABLE IF EXISTS detalle_logros CASCADE
;
DROP TABLE IF EXISTS directivo CASCADE
;
DROP TABLE IF EXISTS email_persona CASCADE
;
DROP TABLE IF EXISTS especialidad CASCADE
;
DROP TABLE IF EXISTS estudiante CASCADE
;
DROP TABLE IF EXISTS estudiante_acudiente CASCADE
;
DROP TABLE IF EXISTS fuentes_recursos CASCADE
;
DROP TABLE IF EXISTS grado CASCADE
;
DROP TABLE IF EXISTS institucion_familiar CASCADE
;
DROP TABLE IF EXISTS jornada CASCADE
;
DROP TABLE IF EXISTS logro_clasificacion CASCADE
;
DROP TABLE IF EXISTS logros CASCADE
;
DROP TABLE IF EXISTS matricula CASCADE
;
DROP TABLE IF EXISTS metodologia CASCADE
;
DROP TABLE IF EXISTS municipio CASCADE
;
DROP TABLE IF EXISTS periodo CASCADE
;
DROP TABLE IF EXISTS persona CASCADE
;
DROP TABLE IF EXISTS poblacion_victima CASCADE
;
DROP TABLE IF EXISTS profesor CASCADE
;
DROP TABLE IF EXISTS sede CASCADE
;
DROP TABLE IF EXISTS sit_acad_anio_ant CASCADE
;
DROP TABLE IF EXISTS telefono_persona CASCADE
;
DROP TABLE IF EXISTS tipo_directivo CASCADE
;
DROP TABLE IF EXISTS tipo_documento CASCADE
;
DROP TABLE IF EXISTS tipo_jornada CASCADE
;
DROP TABLE IF EXISTS tipo_logro CASCADE
;
DROP TABLE IF EXISTS tipo_parentesco CASCADE
;
DROP TABLE IF EXISTS titular_curso CASCADE
;

--  Create Tables 
CREATE TABLE acudiente
(
	acudiente_id INTEGER NOT NULL AUTO_INCREMENT,
	persona_id INTEGER NOT NULL,
	tipo_parentesco_id INTEGER NOT NULL,
	PRIMARY KEY (acudiente_id),
	UNIQUE UQ_acudiente_acudiente_id(acudiente_id),
	UNIQUE UQ_acudiente_persona_id(persona_id),
	KEY (persona_id),
	KEY (tipo_parentesco_id)

) 
;


CREATE TABLE anio
(
	anio_id INTEGER NOT NULL AUTO_INCREMENT,
	anio INTEGER,
	actual BOOL,
	sede_id INTEGER,
	PRIMARY KEY (anio_id),
	KEY (sede_id)

) 
;


CREATE TABLE area_conocimiento
(
	area_id INTEGER NOT NULL AUTO_INCREMENT,
	ano DOUBLE COMMENT 'Es el a�o al cual corresponde esta are4a en la sede debe validarse que sea un entero mayor a 2000 y menor a un a�o mas',
	nombre VARCHAR(50),
	PRIMARY KEY (area_id),
	UNIQUE UQ_area_conocimiento_area_id(area_id)

) 
;


CREATE TABLE asignatura
(
	asignatura_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	cantidad_horas INTEGER,
	area_id INTEGER,
	PRIMARY KEY (asignatura_id),
	UNIQUE UQ_asignatura_asignatura_id(asignatura_id),
	KEY (area_id),
	KEY (area_id)

) 
;


CREATE TABLE asignatura_curso
(
	asignatura_curso_id INTEGER NOT NULL AUTO_INCREMENT,
	asignatura_id INTEGER NOT NULL,
	curso_id INTEGER NOT NULL,
	PRIMARY KEY (asignatura_curso_id),
	KEY (asignatura_id),
	KEY (curso_id)

) 
;


CREATE TABLE asignatura_curso_profesor
(
	asignatura_curso_profesor_id INTEGER NOT NULL AUTO_INCREMENT,
	asignatura_curso_id INTEGER NOT NULL,
	profesor_id INTEGER NOT NULL,
	fecha_inicio DATETIME NOT NULL,
	fecha_fin BIGINT,
	PRIMARY KEY (asignatura_curso_profesor_id),
	UNIQUE UQ_asignatura_curso_profesor_asignatura_curso_profesor_id(asignatura_curso_profesor_id),
	KEY (asignatura_curso_id)

) 
;


CREATE TABLE boletin
(
	boletin_id INTEGER NOT NULL AUTO_INCREMENT,
	matricula_id INTEGER NOT NULL,
	periodo_id INTEGER NOT NULL,
	observaciones TEXT,
	PRIMARY KEY (boletin_id),
	KEY (matricula_id),
	KEY (periodo_id)

) 
;


CREATE TABLE calificacion
(
	calificacion_id INTEGER NOT NULL AUTO_INCREMENT,
	asignatura_curso_id INTEGER NOT NULL,
	boletin_id INTEGER NOT NULL,
	observaciones TEXT,
	PRIMARY KEY (calificacion_id),
	KEY (asignatura_curso_id),
	KEY (boletin_id)

) 
;


CREATE TABLE caracter
(
	caracter_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (caracter_id)

)  COMMENT='Define de un curso o de un estudiante (ejemplo: Academico o Tecnico)'
;


CREATE TABLE caracteristica_boletin
(
	caracteristica_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	calculo VARCHAR(50) NOT NULL,
	tipo_valor VARCHAR(50) NOT NULL,
	PRIMARY KEY (caracteristica_id)

) 
;


CREATE TABLE colegio
(
	colegio_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	codigo_dane VARCHAR(50) NOT NULL,
	municipio_id INTEGER,
	dane_anterior VARCHAR(50),
	actual BOOL,
	path_logo VARCHAR(50),
	PRIMARY KEY (colegio_id),
	UNIQUE UQ_colegio_codigo_dane(codigo_dane),
	UNIQUE UQ_colegio_colegio_id(colegio_id)

) 
;


CREATE TABLE condicion_anio_anterior
(
	condicion_anio_anterior_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	sit_acad_anio_ant INTEGER,
	PRIMARY KEY (condicion_anio_anterior_id),
	KEY (sit_acad_anio_ant)

) 
;


CREATE TABLE curso
(
	curso_id INTEGER NOT NULL AUTO_INCREMENT,
	grado_id INTEGER NOT NULL,
	nombre VARCHAR(10) NOT NULL,
	caracter_id INTEGER COMMENT 'Indica el caracter (tecnico o academico del curso)',
	especialidad_id INTEGER COMMENT 'relacion con la tabla especilidad que indica si es por ejemplo: industrial o comercial',
	metodologia_id INTEGER COMMENT 'Relacion con metodologia (Escuela Tradicional, Post primaria...)',
	PRIMARY KEY (curso_id),
	UNIQUE UQ_curs_curso_id(curso_id),
	KEY (caracter_id),
	KEY (grado_id),
	KEY (especialidad_id),
	KEY (metodologia_id)

) 
;


CREATE TABLE departamento
(
	departamento_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (departamento_id)

) 
;


CREATE TABLE detalle_calificacion
(
	detalle_calificacion_id INTEGER NOT NULL AUTO_INCREMENT,
	calificacion_id INTEGER,
	caracteristica_id INTEGER NOT NULL,
	valor_caracteristica VARCHAR(50) NOT NULL,
	PRIMARY KEY (detalle_calificacion_id),
	KEY (calificacion_id),
	KEY (caracteristica_id)

) 
;


CREATE TABLE detalle_logros
(
	detalle_logro_id INTEGER NOT NULL AUTO_INCREMENT,
	logro_id INTEGER NOT NULL,
	logro_clasificacion_id INTEGER NOT NULL,
	calificacion_id INTEGER NOT NULL,
	PRIMARY KEY (detalle_logro_id),
	UNIQUE UQ_detalle_logros_detalle_logro_id(detalle_logro_id),
	KEY (calificacion_id),
	KEY (logro_clasificacion_id),
	KEY (logro_id),
	KEY (calificacion_id)

) 
;


CREATE TABLE directivo
(
	directivo_id INTEGER NOT NULL AUTO_INCREMENT,
	persona_id INTEGER NOT NULL,
	tipo_directivo_id INTEGER NOT NULL,
	jornada_id INTEGER NOT NULL,
	PRIMARY KEY (directivo_id),
	KEY (jornada_id),
	KEY (persona_id),
	KEY (tipo_directivo_id)

) 
;


CREATE TABLE email_persona
(
	telefono_persona_id INTEGER NOT NULL AUTO_INCREMENT,
	persona_id INTEGER NOT NULL,
	telefono VARCHAR(50),
	PRIMARY KEY (telefono_persona_id),
	UNIQUE UQ_email_persona_telefono_persona_id(telefono_persona_id),
	KEY (persona_id)

) 
;


CREATE TABLE especialidad
(
	especialidad_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (especialidad_id)

)  COMMENT='indica la especialidad si es industrial o comercial'
;


CREATE TABLE estudiante
(
	estudiante_id INTEGER NOT NULL AUTO_INCREMENT,
	codigo VARCHAR(50),
	persona_id INTEGER NOT NULL,
	PRIMARY KEY (estudiante_id),
	UNIQUE UQ_estudiante_estudiante_id(estudiante_id),
	UNIQUE UQ_estudiante_persona_id(persona_id),
	KEY (persona_id)

) 
;


CREATE TABLE estudiante_acudiente
(
	estudiante_acudiente_id INTEGER NOT NULL AUTO_INCREMENT,
	estudiante_ud INTEGER NOT NULL,
	acudiente_id INTEGER NOT NULL,
	PRIMARY KEY (estudiante_acudiente_id),
	UNIQUE UQ_estudiante_acudiente_estudiante_acudiente_id(estudiante_acudiente_id),
	UNIQUE UQ_estudiante_acudiente(estudiante_ud, acudiente_id),
	KEY (acudiente_id),
	KEY (estudiante_ud)

) 
;


CREATE TABLE fuentes_recursos
(
	fuentes_recursos_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (fuentes_recursos_id)

)  COMMENT='SGP FNR Recursos adicionales presupuesto nacional MEN Otros Recursos de la Naci�n Recursos Propios'
;


CREATE TABLE grado
(
	grado_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(25),
	ano INTEGER COMMENT 'A�o que corresponde al curso en la sede',
	jornada_id INTEGER,
	PRIMARY KEY (grado_id),
	UNIQUE UQ_grado_grado_id(grado_id),
	KEY (jornada_id)

) 
;


CREATE TABLE institucion_familiar
(
	institucion_familiar_id INTEGER NOT NULL AUTO_INCREMENT COMMENT 'Ident',
	nombre VARCHAR(100) COMMENT 'Nombre de la instucion familiar',
	PRIMARY KEY (institucion_familiar_id)

) 
;


CREATE TABLE jornada
(
	jornada_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	tipo_jornada_id INTEGER,
	anio_id INTEGER,
	PRIMARY KEY (jornada_id),
	UNIQUE UQ_jornada_jornada_id(jornada_id),
	KEY (anio_id),
	KEY (tipo_jornada_id)

) 
;


CREATE TABLE logro_clasificacion
(
	logro_clasificacion_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	PRIMARY KEY (logro_clasificacion_id)

)  COMMENT='Indica las caracteristicas de algunas veces o siempre o de vez en cuando de un logro'
;


CREATE TABLE logros
(
	logro_id INTEGER NOT NULL AUTO_INCREMENT,
	asignatura_id INTEGER NOT NULL,
	nombre TEXT NOT NULL,
	tipo_logro_id INTEGER,
	PRIMARY KEY (logro_id),
	UNIQUE UQ_logros_logro_id(logro_id),
	KEY (asignatura_id),
	KEY (tipo_logro_id)

) 
;


CREATE TABLE matricula
(
	matricula_id INTEGER NOT NULL AUTO_INCREMENT,
	numero_matricula VARCHAR(50),
	estudiante_id INTEGER NOT NULL,
	curso_id INTEGER NOT NULL,
	promovido BOOL,
	pob_vict_conf BOOL COMMENT 'Publacion victima de conflicto',
	poblacion_victima_id INTEGER COMMENT 'Indica el tipo de poblacion victima de conflicto',
	departamento_expulsor VARCHAR(20) COMMENT 'Departmento de que fue expulsado por ser victima de conflicto ',
	municipio_expulsor VARCHAR(20) COMMENT 'Municipio del que fue expulsado por ser victima del conflicto',
	proviene_sector_privado BOOL,
	proviene_otro_municipio BOOL,
	tipo_discapacidad_id INTEGER COMMENT 'Tipo de discapacidad del estudiante',
	capacidad_excepcional_id INTEGER COMMENT 'Indica el id del tipo del capacidad excepcional del alumno al matricularse',
	institucion_familiar_id INTEGER COMMENT 'Institucion familiar de origen',
	subsidiado BOOL COMMENT 'El estudiante tiene un subsidio',
	repitente BOOL COMMENT 'Indica si el alumno es repitente del grado',
	nuevo BOOL COMMENT 'indica si el estudiante es nuevo',
	cabeza_familia BOOL COMMENT 'el alumno es madre cabeza de familia',
	ben_mad_flia BOOL COMMENT 'Hijo Beneficiario Cabeza de Familia',
	ben_vet_flia BIGINT COMMENT 'Beneficiario Veteranos de la fuerza publica',
	ben_her_nac BOOL COMMENT 'Beneficiario Heroes de la nacion',
	caracter_id INTEGER COMMENT 'Indica el caracter de la matricula del alumno si es academica o tecnica',
	especialidad_id INTEGER COMMENT 'Indica la especialidad sobre la que esta matriculado el alumno (industrial o comercial) en caso de que el curso sea multi epecialidad',
	metodologia_id INTEGER COMMENT 'Relacion con metodologia (Escuela Tradicional, Post primaria...)',
	sit_acad_anio_ant_id INTEGER,
	fuentes_recursos_id INTEGER COMMENT 'relacion al tabla de fuentes de recursos (SGP,FNR)',
	zona_alumno enum ('U','R') COMMENT 'U indica que el estudiante es de la zona urbana, R indica que el estudiante es de la zona rural',
	condicion_anio_anterior_id INTEGER,
	PRIMARY KEY (matricula_id),
	UNIQUE UQ_matricula_matricula_id(matricula_id),
	KEY (condicion_anio_anterior_id),
	KEY (especialidad_id),
	KEY (fuentes_recursos_id),
	KEY (curso_id),
	KEY (estudiante_id),
	KEY (metodologia_id),
	KEY (poblacion_victima_id),
	KEY (sit_acad_anio_ant_id),
	KEY (caracter_id)

)  COMMENT='Registro de matricula para un estudiante'
;


CREATE TABLE metodologia
(
	metodologia_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (metodologia_id)

)  COMMENT='Ejemplos de Valores: Educaci�n Tradicional Escuela nueva Post primaria Telesecundaria SER CAFAM SAT Etnoeducaci�n Aceleraci�n del Aprendizaje Programa para J�venes en extraedad y Adultos (Decreto 3011) Preescolar Escolarizado Preescolar No Escolarizado/Semiescolarizado SAT presencial'
;


CREATE TABLE municipio
(
	municipio_id INTEGER NOT NULL AUTO_INCREMENT,
	codigo_dane VARCHAR(50),
	nombre VARCHAR(50) NOT NULL,
	departamento_id INTEGER,
	PRIMARY KEY (municipio_id),
	UNIQUE UQ_municipio_municipio_id(municipio_id)

) 
;


CREATE TABLE periodo
(
	periodo_id INTEGER NOT NULL AUTO_INCREMENT,
	jornada_id INTEGER NOT NULL,
	fecha_inicio DATE,
	fecha_fin DATE,
	comentario TEXT,
	PRIMARY KEY (periodo_id),
	KEY (jornada_id)

) 
;


CREATE TABLE persona
(
	persona_id INTEGER NOT NULL AUTO_INCREMENT,
	tipo_documento_id INTEGER NOT NULL,
	documento VARCHAR(50) NOT NULL,
	exp_depto VARCHAR(10),
	exp_mun VARCHAR(10),
	nombre1 VARCHAR(50) NOT NULL,
	nombre2 VARCHAR(100),
	apellido1 VARCHAR(100),
	apellido2 VARCHAR(50),
	direccion_residencia VARCHAR(100),
	res_depto VARCHAR(10),
	res_mun VARCHAR(10),
	estrato VARCHAR(2),
	sisben VARCHAR(2),
	fecha_nacimiento DATETIME,
	nac_depto VARCHAR(3),
	nac_mun VARCHAR(3),
	genero VARCHAR(1),
	etnia_id INTEGER,
	resguardo_id INTEGER,
	PRIMARY KEY (persona_id),
	UNIQUE UQ_persona_persona_id(persona_id),
	UNIQUE UQ_persona_tipo_documento_documento(tipo_documento_id, documento),
	KEY (tipo_documento_id)

) 
;


CREATE TABLE poblacion_victima
(
	poblacion_victima_id INTEGER NOT NULL,
	nombre VARCHAR(100) NOT NULL,
	PRIMARY KEY (poblacion_victima_id)

) 
;


CREATE TABLE profesor
(
	profesor_id INTEGER NOT NULL AUTO_INCREMENT,
	persona_id INTEGER NOT NULL,
	PRIMARY KEY (profesor_id),
	UNIQUE UQ_profesor_persona_id(persona_id),
	UNIQUE UQ_profesor_profesor_id(profesor_id),
	KEY (persona_id)

) 
;


CREATE TABLE sede
(
	sede_id INTEGER NOT NULL AUTO_INCREMENT,
	colegio_id INTEGER,
	municipio_id INTEGER NOT NULL,
	antiguo_codigo_dane VARCHAR(50) NOT NULL,
	consecutivo INTEGER NOT NULL,
	actual BOOL,
	nombre VARCHAR(50),
	PRIMARY KEY (sede_id),
	UNIQUE UQ_Sede_antiguo_codigo_dane(antiguo_codigo_dane),
	UNIQUE UQ_Sede_sede_id(sede_id),
	KEY (colegio_id),
	KEY (municipio_id)

) 
;


CREATE TABLE sit_acad_anio_ant
(
	sit_acad_anio_ant INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (sit_acad_anio_ant)

)  COMMENT='Situacion Academica A�o Anterior Ejemplo: Aprobo, reprobo, No culmino estudios'
;


CREATE TABLE telefono_persona
(
	telefono_persona_id INTEGER NOT NULL AUTO_INCREMENT,
	persona_id INTEGER NOT NULL,
	telefono VARCHAR(50) NOT NULL,
	PRIMARY KEY (telefono_persona_id),
	UNIQUE UQ_telefono_persona_telefono_persona_id(telefono_persona_id),
	KEY (persona_id)

) 
;


CREATE TABLE tipo_directivo
(
	tipo_directivo_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	PRIMARY KEY (tipo_directivo_id),
	UNIQUE UQ_tipo_directivo_tipo_directivo_id(tipo_directivo_id)

) 
;


CREATE TABLE tipo_documento
(
	tipo_documento_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	PRIMARY KEY (tipo_documento_id),
	UNIQUE UQ_tipo_documento_tipo_documento_id(tipo_documento_id)

) 
;


CREATE TABLE tipo_jornada
(
	tipo_jornada_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre BIGINT NOT NULL,
	PRIMARY KEY (tipo_jornada_id),
	UNIQUE UQ_tipo_jornada_tipo_jornada_id(tipo_jornada_id)

)  COMMENT='Los tipos de jornada son: completa, tarde, noche'
;


CREATE TABLE tipo_logro
(
	tipo_logo_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50),
	PRIMARY KEY (tipo_logo_id),
	UNIQUE UQ_tipo_logro_tipo_logo_id(tipo_logo_id)

) 
;


CREATE TABLE tipo_parentesco
(
	tipo_parentesco_id INTEGER NOT NULL AUTO_INCREMENT,
	nombre VARCHAR(50) NOT NULL,
	PRIMARY KEY (tipo_parentesco_id),
	UNIQUE UQ_tipo_parentesco_tipo_parentesco_id(tipo_parentesco_id)

) 
;


CREATE TABLE titular_curso
(
	titular_curso_id INTEGER NOT NULL AUTO_INCREMENT,
	curso_id INTEGER NOT NULL,
	profesor_id INTEGER NOT NULL,
	fecha_inicio DATETIME NOT NULL,
	fecha_fin DATETIME,
	PRIMARY KEY (titular_curso_id),
	UNIQUE UQ_titular_curso_titular_curso_id(titular_curso_id),
	KEY (curso_id),
	KEY (profesor_id)

) 
;



SET FOREIGN_KEY_CHECKS=1;


--  Create Foreign Key Constraints 
ALTER TABLE acudiente ADD CONSTRAINT FK_acudiente_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE acudiente ADD CONSTRAINT FK_tipo_parentesco_id 
	FOREIGN KEY (tipo_parentesco_id) REFERENCES tipo_parentesco (tipo_parentesco_id)
;

ALTER TABLE asignatura ADD CONSTRAINT FK_asignatura_area_conocimiento 
	FOREIGN KEY (area_id) REFERENCES area_conocimiento (area_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE asignatura_curso ADD CONSTRAINT FK_asignatura_curso_asignatura 
	FOREIGN KEY (asignatura_id) REFERENCES asignatura (asignatura_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE asignatura_curso ADD CONSTRAINT FK_asignatura_curso_curso 
	FOREIGN KEY (curso_id) REFERENCES curso (curso_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE asignatura_curso_profesor ADD CONSTRAINT FK_asignatura_curso_profesor_asignatura_curso 
	FOREIGN KEY (asignatura_curso_id) REFERENCES asignatura_curso (asignatura_curso_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE boletin ADD CONSTRAINT FK_boletin_matricula 
	FOREIGN KEY (matricula_id) REFERENCES matricula (matricula_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE boletin ADD CONSTRAINT FK_boletin_periodo 
	FOREIGN KEY (periodo_id) REFERENCES periodo (periodo_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE calificacion ADD CONSTRAINT FK_calificacion_asignatura_curso 
	FOREIGN KEY (asignatura_curso_id) REFERENCES asignatura_curso (asignatura_curso_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE calificacion ADD CONSTRAINT FK_calificacion_boletin 
	FOREIGN KEY (boletin_id) REFERENCES boletin (boletin_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE condicion_anio_anterior ADD CONSTRAINT FK_sit_acad_anio_ant 
	FOREIGN KEY (sit_acad_anio_ant) REFERENCES sit_acad_anio_ant (sit_acad_anio_ant)
;

ALTER TABLE curso ADD CONSTRAINT FK_caracter_id 
	FOREIGN KEY (caracter_id) REFERENCES caracter (caracter_id)
;

ALTER TABLE curso ADD CONSTRAINT FK_curso_grado 
	FOREIGN KEY (grado_id) REFERENCES grado (grado_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE curso ADD CONSTRAINT FK_especialidad_id 
	FOREIGN KEY (especialidad_id) REFERENCES especialidad (especialidad_id)
;

ALTER TABLE curso ADD CONSTRAINT FK_metodologia_id 
	FOREIGN KEY (metodologia_id) REFERENCES metodologia (metodologia_id)
;

ALTER TABLE detalle_calificacion ADD CONSTRAINT FK_detalle_calificacion_calificacion 
	FOREIGN KEY (calificacion_id) REFERENCES calificacion (calificacion_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE detalle_calificacion ADD CONSTRAINT FK_detalle_calificacion_caracteristica_boletin 
	FOREIGN KEY (caracteristica_id) REFERENCES caracteristica_boletin (caracteristica_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE detalle_logros ADD CONSTRAINT FK_detalle_logros_calificacion 
	FOREIGN KEY (calificacion_id) REFERENCES calificacion (calificacion_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE detalle_logros ADD CONSTRAINT FK_detalle_logros_logro_clasificacion 
	FOREIGN KEY (logro_clasificacion_id) REFERENCES logro_clasificacion (logro_clasificacion_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE detalle_logros ADD CONSTRAINT FK_logros_obtenidos_logros 
	FOREIGN KEY (logro_id) REFERENCES logros (logro_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE directivo ADD CONSTRAINT FK_Directivo_jornada 
	FOREIGN KEY (jornada_id) REFERENCES jornada (jornada_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE directivo ADD CONSTRAINT FK_Directivo_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE directivo ADD CONSTRAINT FK_Directivo_tipo_directivo 
	FOREIGN KEY (tipo_directivo_id) REFERENCES tipo_directivo (tipo_directivo_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE email_persona ADD CONSTRAINT FK_email_persona_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE estudiante ADD CONSTRAINT FK_estudiante_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE NO ACTION ON UPDATE RESTRICT
;

ALTER TABLE estudiante_acudiente ADD CONSTRAINT FK_estudiante_acudiente_acudiente 
	FOREIGN KEY (acudiente_id) REFERENCES acudiente (acudiente_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE estudiante_acudiente ADD CONSTRAINT FK_estudiante_acudiente_estudiante 
	FOREIGN KEY (estudiante_ud) REFERENCES estudiante (estudiante_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE grado ADD CONSTRAINT FK_grado_jornada 
	FOREIGN KEY (jornada_id) REFERENCES jornada (jornada_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE jornada ADD CONSTRAINT FK_anio_id 
	FOREIGN KEY (anio_id) REFERENCES anio (anio_id)
;

ALTER TABLE jornada ADD CONSTRAINT FK_jornada_tipo_jornada 
	FOREIGN KEY (tipo_jornada_id) REFERENCES tipo_jornada (tipo_jornada_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE logros ADD CONSTRAINT FK_logros_asignatura 
	FOREIGN KEY (asignatura_id) REFERENCES asignatura (asignatura_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE logros ADD CONSTRAINT FK_logros_tipo_logro 
	FOREIGN KEY (tipo_logro_id) REFERENCES tipo_logro (tipo_logo_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE matricula ADD CONSTRAINT FK_condicion_anio_anterior_id 
	FOREIGN KEY (condicion_anio_anterior_id) REFERENCES condicion_anio_anterior (condicion_anio_anterior_id)
;

ALTER TABLE matricula ADD CONSTRAINT FK_fuentes_recursos_id 
	FOREIGN KEY (fuentes_recursos_id) REFERENCES fuentes_recursos (fuentes_recursos_id)
;

ALTER TABLE matricula ADD CONSTRAINT FK_matricula_curso 
	FOREIGN KEY (curso_id) REFERENCES curso (curso_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE matricula ADD CONSTRAINT FK_matricula_estudiante 
	FOREIGN KEY (estudiante_id) REFERENCES estudiante (estudiante_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE matricula ADD CONSTRAINT FK_poblacion_victima_id 
	FOREIGN KEY (poblacion_victima_id) REFERENCES poblacion_victima (poblacion_victima_id)
;

ALTER TABLE matricula ADD CONSTRAINT FK_sit_acad_anio_ant_id 
	FOREIGN KEY (sit_acad_anio_ant_id) REFERENCES sit_acad_anio_ant (sit_acad_anio_ant)
;

ALTER TABLE municipio ADD CONSTRAINT FK_municipio_id 
	FOREIGN KEY (municipio_id) REFERENCES departamento (departamento_id)
;

ALTER TABLE periodo ADD CONSTRAINT FK_periodo_jornada 
	FOREIGN KEY (jornada_id) REFERENCES jornada (jornada_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE persona ADD CONSTRAINT FK_persona_tipo_documento 
	FOREIGN KEY (tipo_documento_id) REFERENCES tipo_documento (tipo_documento_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE profesor ADD CONSTRAINT FK_profesor_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE sede ADD CONSTRAINT FK_colegio 
	FOREIGN KEY (colegio_id) REFERENCES colegio (colegio_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE sede ADD CONSTRAINT FK_Sede_municipio 
	FOREIGN KEY (municipio_id) REFERENCES municipio (municipio_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE telefono_persona ADD CONSTRAINT FK_telefono_persona_persona 
	FOREIGN KEY (persona_id) REFERENCES persona (persona_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE titular_curso ADD CONSTRAINT FK_titular_curso_curso 
	FOREIGN KEY (curso_id) REFERENCES curso (curso_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;

ALTER TABLE titular_curso ADD CONSTRAINT FK_titular_curso_profesor 
	FOREIGN KEY (profesor_id) REFERENCES profesor (profesor_id)
	ON DELETE RESTRICT ON UPDATE RESTRICT
;
